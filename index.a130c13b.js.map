{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCEA,I,EAAM,E,A,S,C,E,G,M,O,C,G,O,E,E,E,EAAa,SAAS,gBAAgB,CAAC,gB,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,IAOvC,EAAmB,SAAC,CADzB,EACkC,OAAA,CAAI,CAAC,EAAE,CAAC,WAAW,GAAK,EAAK,KAAK,CAAC,E,EAOhE,EAAqB,SAAC,CAD3B,EAEM,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAY,CAAA,CAAA,OAAA,QAAA,CAAA,GAAZ,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAA,CAAA,EAAiB,CAAjB,IAAM,EAAN,EAAA,KAAA,CAGH,GAF0B,IAAO,EAAG,WAAW,GAG7C,OAAO,EACJ,OAAO,CAAC,EAAK,IAAM,MAAA,CAAH,IAChB,KAAK,CAAC,KACN,GAAG,CAAC,GACJ,IAAI,CAAC,IAEZ,C,C,M,E,CAVK,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAYL,OAAO,EAAiB,EAC1B,GAoBA,AAb0B,SAAC,CAD1B,EAEC,EAAc,OAAO,CAAC,SAAC,CAAvB,EACE,IAAM,EAAe,SAAS,aAAa,CAAC,QAE5C,CAAA,EAAa,OAAO,CAAG,EAAM,EAAE,CAC/B,EAAa,SAAS,CAAC,GAAG,CAAC,eAC3B,EAAa,SAAS,CAAG,EAAmB,EAAM,IAAI,EAEtD,EAAM,WAAW,CAAG,EAAmB,EAAM,IAAI,EACjD,EAAM,aAAa,CAAC,OAAO,CAAC,EAC9B,EACF,EAEkB","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar inputs = _to_consumable_array(document.querySelectorAll(\"form input\"));\n/**\n * @function getUpperCaseWord\n * @param {string} word;\n * @returns {string}\n */ var getUpperCaseWord = function(word) {\n    return word[0].toUpperCase() + word.slice(1);\n};\n/**\n * @function getStringFormat\n * @param {string} str\n * @returns {string}\n */ var getFormattedString = function(str) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = str[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var ch = _step.value;\n            var isUpperCaseLetter = ch !== ch.toLowerCase();\n            if (isUpperCaseLetter) return str.replace(ch, \" \".concat(ch)).split(\" \").map(getUpperCaseWord).join(\" \");\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    return getUpperCaseWord(str);\n};\n/**\n * @function addedLabelElement\n * @param {Element[]} arrayOfInputs;\n * @returns {void}\n */ var addedLabelElement = function(arrayOfInputs) {\n    arrayOfInputs.forEach(function(input) {\n        var labelElement = document.createElement(\"label\");\n        labelElement.htmlFor = input.id;\n        labelElement.classList.add(\"field-label\");\n        labelElement.innerText = getFormattedString(input.name);\n        input.placeholder = getFormattedString(input.name);\n        input.parentElement.prepend(labelElement);\n    });\n};\naddedLabelElement(inputs);\n\n//# sourceMappingURL=index.a130c13b.js.map\n","'use strict';\n\nconst inputs = [...document.querySelectorAll('form input')];\n\n/**\n * @function getUpperCaseWord\n * @param {string} word;\n * @returns {string}\n */\nconst getUpperCaseWord = (word) => word[0].toUpperCase() + word.slice(1);\n\n/**\n * @function getStringFormat\n * @param {string} str\n * @returns {string}\n */\nconst getFormattedString = (str) => {\n  for (const ch of str) {\n    const isUpperCaseLetter = ch !== ch.toLowerCase();\n\n    if (isUpperCaseLetter) {\n      return str\n        .replace(ch, ` ${ch}`)\n        .split(' ')\n        .map(getUpperCaseWord)\n        .join(' ');\n    }\n  }\n\n  return getUpperCaseWord(str);\n};\n\n/**\n * @function addedLabelElement\n * @param {Element[]} arrayOfInputs;\n * @returns {void}\n */\nconst addedLabelElement = (arrayOfInputs) => {\n  arrayOfInputs.forEach((input) => {\n    const labelElement = document.createElement('label');\n\n    labelElement.htmlFor = input.id;\n    labelElement.classList.add('field-label');\n    labelElement.innerText = getFormattedString(input.name);\n\n    input.placeholder = getFormattedString(input.name);\n    input.parentElement.prepend(labelElement);\n  });\n};\n\naddedLabelElement(inputs);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","inputs","_array_without_holes","isArray","document","querySelectorAll","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","getUpperCaseWord","word","toUpperCase","getFormattedString","str","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","ch","value","toLowerCase","replace","concat","split","map","join","err","return","addedLabelElement","arrayOfInputs","forEach","input","labelElement","createElement","htmlFor","id","classList","add","innerText","placeholder","parentElement","prepend"],"version":3,"file":"index.a130c13b.js.map"}